#!/usr/bin/env python
import numpy

from code_analysis import Graph
import numpy as np

class AST(Graph):
    def vectorize(self, node=None) -> np.ndarray:
        if node is None:
            nodes = self.get_node_ids()
        else:
            nodes = self.dfs(node)
        v = np.zeros(len(self.types))
        for node in nodes:
            if self.get_type(node) not in self.types:
                print(f"WARN: Type {self.get_type(node)} unknown. Skip node {node}..")
                continue
            v[self.types.index(self.get_type(node))] += 1
        return v

    def __init__(self):
        super(AST, self).__init__()
        self.__fragments = None
        self.types = [
            "AbstractMethodStatement",
            "AbstractPublicMethodStatement",
            "AbstractProtectedMethodStatement",
            "AbstractPrivateMethodStatement",
            "ArgumentList",
            "Argument",
            "Array",
            "Arobas",
            "ArrayInitialisation",
            "ArrayExpression",
            "BinOP",
            "Block",
            "Bool",
            "Boolean",
            "Break",
            "Case",
            "CastExpression",
            "Catch",
            "ClassAccess",
            "ClassInstanciation",
            "ClassName",
            "ClassStatement",
            "Clone",
            "ClosureExpression",
            "Condition",
            "ConditionalExpression",
            "ConditionalFalse",
            "ConditionalTrue",
            "ConstMemberDeclaration",
            "Continue",
            "DeclareStatement",
            "Default",
            "Double",
            "DoubleLiteral",
            "DoWhile",
            "EchoStatement",
            "EId",
            "ElseIf",
            "ElseIfList",
            "ExecString",
            "ExpressionStatement",
            "False",
            "Float",
            "For",
            "ForEach",
            "FunctionCall",
            "FunctionStatement",
            "Global",
            "HeredocFlow",
            "HexLiteral",
            "Html",
            "Id",
            "IfThenElifElseStatement",
            "IfThenElifStatement",
            "IfThenElseStatement",
            "IfThenStatement",
            "Implements",
            "IncludeStatement",
            "IncludeOnceStatement",
            "Increment",
            "Init",
            "Int",
            "Integer",
            "IntegerLiteral",
            "InterfaceStatement",
            "LegalChar",
            "LogicOP",
            "MemberDeclaration",
            "MethodCall",
            "MethodStatement",
            "NamespaceName",
            "NamespaceStatement",
            "New",
            "Null",
            "Object",
            "OptReferenceParameter",
            "OptTypedReferenceParameter",
            "OptTypedValueParameter",
            "OptValueParameter",
            "ParameterList",
            "ParentClassName",
            "PostfixExpression",
            "PostIncrement",
            "PreIncrement",
            "PrintStatement",
            "Private",
            "PrivateMemberDeclaration",
            "PrivateMethodStatement",
            "Protected",
            "ProtectedMemberDeclaration",
            "ProtectedMethodStatement",
            "Public",
            "PublicMemberDeclaration",
            "PublicMethodStatement",
            "ReferenceParameter",
            "RelOP",
            "RequireStatement",
            "RequireOnceStatement",
            "Return",
            "ReturnReferenceFunction",
            "ReturnReferenceMethod",
            "ReturnValueFunction",
            "ReturnValueMethod",
            "Start",
            "StatementBody",
            "Static",
            "String",
            "StringExpression",
            "StringLiteral",
            "Switch",
            "Throw",
            "TraitStatement",
            "True",
            "TryCatch",
            "TypedReferenceParameter",
            "TypedValueParameter",
            "UnaryOP",
            "UnsetStatement",
            "UseInsteadOf",
            "UseStatement",
            "UseTraitDeclaration",
            "ValueParameter",
            "Variable",
            "VariableExpression",
            "VariableStatement",
            "While"
        ]
